// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Post.Query.Infrastructure.Data;

#nullable disable

namespace Post.Query.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240908153238_createdat")]
    partial class createdat
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Post.Query.Domain.Entities.Deliveries.DeliveryDb", b =>
                {
                    b.Property<Guid>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryId");

                    b.ToTable("Delivery", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.DiscountDb", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LowerThreshold")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<double>("UpperThreshold")
                        .HasColumnType("float");

                    b.HasKey("DiscountId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Discount", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.ItemDb", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("Item", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.OrderDb", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeliveryDbDeliveryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryDbDeliveryId");

                    b.ToTable("Order", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Posts.CommentDb", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Edited")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Posts.PostDb", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.ToTable("Post", "dbo");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.DiscountDb", b =>
                {
                    b.HasOne("Post.Query.Domain.Entities.Orders.OrderDb", "Order")
                        .WithOne("Discount")
                        .HasForeignKey("Post.Query.Domain.Entities.Orders.DiscountDb", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.ItemDb", b =>
                {
                    b.HasOne("Post.Query.Domain.Entities.Orders.OrderDb", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.OrderDb", b =>
                {
                    b.HasOne("Post.Query.Domain.Entities.Deliveries.DeliveryDb", null)
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryDbDeliveryId");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Posts.CommentDb", b =>
                {
                    b.HasOne("Post.Query.Domain.Entities.Posts.PostDb", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Deliveries.DeliveryDb", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Orders.OrderDb", b =>
                {
                    b.Navigation("Discount")
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Post.Query.Domain.Entities.Posts.PostDb", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
